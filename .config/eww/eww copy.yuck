(defpoll volume :interval "1s" "scripts/getvol")
(defpoll time :interval "10s" "date '+%H:%M %b %d, %Y'")
(defpoll cpu :interval "5s" "scripts/cpu")
(defpoll tempcpu :interval "5s" "scripts/tempcpu")
(defpoll logotempcpu :interval "5s" "scripts/logotempcpu")
(deflisten desktopCurrent 'xprop -spy -root _NET_CURRENT_DESKTOP')



(defwidget leftbar []
  (centerbox :orientation "h"
    (workspaces)
    (separator)
    (shortcuts)))

(defwidget rightbar []
  (centerbox :orientation "h"
    (blank)
    (blank)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"

;;  (metric :label ""
;;            :value volume
;;            :onchange "pactl set-sink-volume alsa_output.pci-0000_00_1b.0.analog-stereo {}%")

            (box :label "temperatureCPU" :class "temperatureCPU" {logotempcpu + "  " + tempcpu + "°C      "})
    (metric :label ""
            :value {cpu}
            :onchange "")
;;    (metric :label ""
;;            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
;;            :onchange "")
    time))
    
(defwidget blank[]
    (box :class "blank"
         :orientation "h"
         :halign "center"
         ""))

(defwidget shortcuts []
  (box  :class "shortcuts"
        :orientation "h"
        :space-evenly true
        :halign "start"
        :spacing 25
  (button :onclick "alacritty" "")
  (button :onclick "firefox" "")
  (button :onclick "nautilus" "")
  (button :onclick "spotify" "")
  (button :onclick "discord" "")
  (button :onclick "steam" "")))

(defwidget separator []
(box :class "separator" :orientation "h" :halign "center" "|"))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly false
       :halign "start"
       :spacing 10
       (button :onclick "bspc desktop -f '^1'" "I")
       (button :onclick "bspc desktop -f '^2'" "II")
       (button :onclick "bspc desktop -f '^3'" "III")
       (button :onclick "bspc desktop -f '^4'" "IV")
       (button :onclick "bspc desktop -f '^5'" "V")))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwindow leftbar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "9px"
                      :y "7px"
                      :width "1%"
                      :height "5px"
                      :anchor "top left")
  :reserve (struts :side "top" :distance "40px")
  (leftbar))

(defwindow rightbar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "-9px"
                      :y "7px"
                      :width "1%"
                      :height "5px"
                      :anchor "top right")
  :reserve (struts :side "top" :distance "40px")
  (rightbar))




(defwidget menu []
  (centerbox :orientation "v"
    (shutdown)
    (restart)
    (logout)))

(defwidget shutdown []
  (box :orientation "v" :class "controlButtonShutdown" :halign "center"
    (button :onclick "shutdown -h now" "")))

(defwidget restart []
  (box :orientation "v" :class "controlButtonReboot" :halign "center"
    (button :onclick "reboot" "")))

(defwidget logout []
  (box :orientation "v" :class "controlButtonLogout" :halign "center"
    (button :onclick "scripts/logout" "")))

(defwindow menu 
:windowtype "dock"
:geometry (geometry :x "-9px"
                    :y "50px"
                    :width "1px"
                    :height "1px"
                    :anchor "top right")
(menu))




;;(defwidget profile []
;;  (centerbox :orientation "v"
;;    (image)
;;    (blank)
;;    (subtext)))
;;
;;(defwidget image []
;;  (box :orientation "v" :class "imagepfp" :halign "center"))
;;
;;(defwidget subtext []
;;  (box :orientation "v" :class "textpfp" :halign "center" "hobosyo"))
;;
;;(defwindow profile
;;  :windowtype "dock"
;;  :geometry (geometry :x "-500px"
;;                      :y "0px"
;;                      :width "10px"
;;                      :height "10px"
;;                      :anchor "center")
;;  (profile))

(defvar reveal false)
(defvar eww "eww")

(defwidget shortcutsBottom []
  (box  :orientation "h"
        :class "folders"
        :halign "center"
  
  (shortcutA)
  (shortcutB)
  (shortcutC)
  (shortcutD)
  ))

(defwidget shortcutA []
  (box :orientation "v" :class "boxShortcut" :halign "center" :space-evenly false
  (button :onclick "" "")
  (box :orientation "h" :class "textShortcut" :halign "center" "Documents"))
  )

(defwidget shortcutB []
    (box :orientation "v" :class "boxShortcut" :halign "center" :space-evenly false
    (button :onclick "" "")
    (box :orientation "h" :class "textShortcut" :halign "center" "Downloads"))
    )

(defwidget shortcutC []
    (box :orientation "v" :class "boxShortcut" :halign "center" :space-evenly false
    (button :onclick "" "")
    (box :orientation "h" :class "textShortcut" :halign "center" "Images"))
    )

(defwidget shortcutD []
    (box :orientation "v" :class "boxShortcut" :halign "center" :space-evenly false
    (button :onclick "" "")
    (box :orientation "h" :class "textShortcut" :halign "center" "GitHub"))
    )

(defwindow shortcutsBottom
  :windowtype "dock"
  :geometry (geometry :x "20px"
                      :y "-20px"
                      :width "10px"
                      :height "10px"
                      :anchor "bottom left")
  (shortcutsBottom))


(defwidget revealFolders []
    (eventbox :class "eventbox"
              :onhover "${eww} update ${reveal}=true"
              :onhoverlost "${eww} update ${reveal}=false"
)   )