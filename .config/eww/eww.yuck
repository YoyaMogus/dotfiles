(defpoll clock-var :interval "10s" "date '+%H : %M'")
(defpoll date-var :interval "360s" :run-while false "date '+%A %d %B'")
(defpoll user :interval "360s" :run-while false "echo $USER")

(defpoll os :interval "360s" :run-while false "cat /etc/os-release | grep 'PRETTY_NAME' | tail -c +14 | head --bytes=-2")
(defpoll de :interval "360s" :run-while false "echo $XDG_CURRENT_DESKTOP")

(include "menu-2.yuck")

(defwindow menu-1
	:monitor 0
	:geometry (geometry	:x "0px"
				:y "0px"
				:width "1000px"
				:height "600px"
				:anchor "center")
	:stacking "overlay"
	(menu-container)
)

(defwidget menu-container []
	(box	:class "menu-container"
		:orientation "v"
	(top-menu-container)
	(bottom-menu-container)
	)
)

(defwidget top-menu-container []
	(box	:class "top-menu-container"
		:orientation "h"
	(user)
        (systeminfo)
	(top-right-menu-container)
	)
)

(defwidget top-right-menu-container []
	(box	:class "top-right-menu-container"
		:orientation "v"
	(systeminfo-bar)
	)
)

(defwidget bottom-menu-container []
	(box	:class "top-menu-container"
		:orientation "h"
	(time)
	(hardwareinfo)
        (box    :orientation "v"        (sliders) (powerbuttons))
	)
)

;; ---------------------------------------------------------

(defwidget time []
	(box	:class "time"
		:orientation "v"
		:space-evenly false

	(label  :class "clock-label"
                :text {clock-var})
	(label  :class "date-label"
                :text {date-var})
	)
)



(deflisten nvidia-gpu "nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits --loop=1")
(defpoll amd-gpu :interval "1s" :initial-value "0" "cat /sys/class/drm/card1/device/gpu_busy_percent")

(defwidget hardwareinfo []
	(box	:class "hardwareinfo"
		:orientation "v"
		:space-evenly true

	(box	:class "gpuinfo"
		:orientation "h"
		:space-evenly true
		(circular-progress	:class "nvidia-gpu"
					:thickness "10"
					:start-at "0"
					:clockwise true
					:value {nvidia-gpu} (label	:class "nvidia-label"	 :text "󰾲"))

		(circular-progress      :class "amd-gpu"
                                        :thickness "10"
                                        :start-at "0"
                                        :clockwise true
                                        :value {amd-gpu} (label      :class "amd-label"    :text "󰾲"))
	)
	(box	:class "cpuinfo"
		:orientation "h"
		:space-evenly true
		(circular-progress      :class "cpu"
                                        :thickness "10"
                                        :start-at "0"
                                        :clockwise true
                                        :value {EWW_CPU.avg} (label      :class "cpu-label"    :text ""))

		(circular-progress      :class "ram"
                                        :thickness "10"
                                        :start-at "0"
                                        :clockwise true
                                        :value {EWW_RAM.used_mem_perc} (label      :class "ram-label"    :text ""))
	)
	)
)



(defwidget user []
	(box	:class "user"
		:orientation "v"
		:space-evenly false

	(image	:class "profile-picture"
		;;:path "/home/yosyo/Images/tumblr_287a610c43a033c9b327dd5704c22ed0_ac154559_1280.png"
		:image-width "150"
		:image-height "150"
		:width "150"
		:height "150"
		:halign "center"
	)
	(label	:class "user-name"
		:text {"Hello " + user + " !"})
	)
)



(defwidget sliders []
	(box	:class "sliders"
		:orientation "v"
		:space-evenly true

	(scale	:class "brightness"
		:width "150"
		:height "15"
		:min "0"
		:max "255"
		:onchange "brightnessctl set {}"
		:orientation "h")
	(scale	:class "volume"
		:min "0"
		:max "100"
		:value "50"
		:height "15"
		:width "150"
		:onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%"
		:orientation "h")
	)
)



(defwidget powerbuttons []
	(box	:class "powerbuttons"
		:orientation "h"
		:space-evenly true

	(button :class "shutdown"
		:onclick "shutdown -h now"
		"")
	(button :class "logout"
		:onclick "hyprctl dispatch exit"
		"󰗽")
	(button :class "reboot"
		:onclick "reboot"
		"")
	)
)



(defwidget systeminfo []
	(box	:class "systeminfo"
		:orientation "v"
		:space-evenly true

	(label	:class "os"
		:text {"OS : " + os})
	(label	:class "de"
		:text {"DE : " + de})

	(label  :class "disk1"
		:text {"DATA DISK : " + round(EWW_DISK["/media/data"].used / 1000000000, 3) + " / " + round(EWW_DISK["/media/data"].total / 1000000000, 3) })
	(label  :class "disk2"
		:text {"ROOT DISK : " + round(EWW_DISK["/"].used / 1000000000, 3) + " / " + round(EWW_DISK["/"].total / 1000000000, 3) })
	)
)



(defwidget systeminfo-bar []
	(box	:class "systeminfo-bar"
		:orientation "v"
		:space-evenly false

	(progress       :value {EWW_DISK["/media/data"].used_perc})
	(progress       :value {EWW_DISK["/"].used_perc})
	)
)
